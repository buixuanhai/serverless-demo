service: te-sample-${self:custom.stage}
package:
  individually: true

provider:
  name: aws
  region: us-east-1
  stage: dev
  profile: te-hai
  role: LambdaRole
  environment:
    #mysql
    MYSQL_HOST: ${self:custom.MYSQL.HOST}
    MYSQL_PORT: ${self:custom.MYSQL.PORT}
    
    #common
    DB_NAME: ${self:custom.DB_NAME}
    USERNAME: ${self:custom.USERNAME}
    PASSWORD: ${self:custom.PASSWORD}
custom:
  stage: dev
  webpack:
    webpackConfig: ../webpack.config.js
  DB_NAME: tadev
  USERNAME: master
  PASSWORD: password
  MYSQL:
    HOST:
      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]
    PORT:
      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]
plugins:
  - serverless-pseudo-parameters
  - serverless-offline
resources:
  Resources:
    LambdaRole: ${file(../infra/resource/LambdaRole.yml)}
    ServerlessInternetGateway: ${file(../infra/resource/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(../infra/resource/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(../infra/resource/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(../infra/resource/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(../infra/resource/ServerlessSubnetB.yml)}
    ServerlessSubnetC: ${file(../infra/resource/ServerlessSubnetC.yml)}
    ServerlessSubnetGroup: ${file(../infra/resource/ServerlessSubnetGroup.yml)}
    ServerlessSecurityGroup: ${file(../infra/resource/ServerlessSecurityGroup.yml)}
    RouteTablePublic: ${file(../infra/resource/RouteTablePublic.yml)}
    RoutePublic: ${file(../infra/resource/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(../infra/resource/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(../infra/resource/RouteTableAssociationSubnetB.yml)}
    RouteTableAssociationSubnetC: ${file(../infra/resource/RouteTableAssociationSubnetC.yml)}
    MySqlRDSInstance: ${file(../infra/resource/MySqlRDSInstance.yml)}
    
functions:
  hello:
    handler: src/handler.hello
    events: 
      - http:
          path: /
          method: get
